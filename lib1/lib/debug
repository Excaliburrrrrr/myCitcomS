Advection_diffusion.c:47:                      struct SOURCES *Q0,
Advection_diffusion.c:60:                             struct SOURCES *Q0,
Advection_diffusion.c:392:                      struct SOURCES *Q0,
Advection_diffusion.c:426:                           Q0, Eres, rtf, diff, E->sphere.cap[m].TB,
Advection_diffusion.c:531:                             struct SOURCES *Q0,
Advection_diffusion.c:592:    for(i=0;i<Q0.number;i++)
Advection_diffusion.c:593:	  Q += Q0->Q[i] * exp(-Q0->lambda[i] * (E->monitor.elapsed_time+Q0->t_offset));
Advection_diffusion.c:597:    Q = E->control.Q0;
Advection_diffusion.c:601:      /* XXX: change Q and Q0 to be a vector of ncomp elements */
Advection_diffusion.c:603:      /* Q = Q0 for C = 0, Q = Q0ER for C = 1, and linearly in
Advection_diffusion.c:606:      Q += E->composition.comp_el[m][0][el] * E->control.Q0ER;
Instructions.c:704:  input_float("Q0",&(E->control.Q0),"0.0",m);
Instructions.c:705:  /* Q0_enriched gets read in Tracer_setup.c */
Instructions.c:1961:    fprintf(fp, "Q0=%g\n", E->control.Q0);
Instructions.c:2232:    fprintf(fp, "Q0_enriched=%g\n", E->control.Q0ER);
Output_h5.c:1496:    status = set_attribute_float(input, "Q0", E->control.Q0);
Tracer_setup.c:116:      input_float("Q0_enriched",&(E->control.Q0ER),"0.0",m);
Tracer_setup.c:118:	       E->control.Q0,E->control.Q0ER);
convection_variables.h:55:	}  heat_sources;
